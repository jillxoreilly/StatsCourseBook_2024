Traceback (most recent call last):
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/joreilly/opt/anaconda3/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
To do this we unfortunately have to use different syntax from our regular indexing, as we are *setting* values in the dataframe. We use the function `df.loc`.

#### Step 1: find the rows with long cars

First let's use `df.loc[]` to find the rows where length is greater than for a normal car (looking at the dataframe above, I chose a cut-off of 8 meters).
------------------


[0;36m  Cell [0;32mIn[9], line 1[0;36m[0m
[0;31m    To do this we unfortunately have to use different syntax from our regular indexing, as we are *setting* values in the dataframe. We use the function `df.loc`.[0m
[0m       ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax


